"use strict";
var Promise = require('bluebird');
var child_process = require('child_process');
var pathExists = require('path-exists');
var exec = child_process.exec;
function getTemp(tocat, unit) {
    return new Promise(function (resolve, reject) {
        exec('cat ' + tocat, function (error, stdout, stderr) {
            if (error) {
                reject(error);
            }
            else {
                if (stdout) {
                    var temp_1;
                    var tempread = parseInt(stdout.replace('\n', ''));
                    if (tempread > 1000) {
                        temp_1 = tempread / 1000;
                    }
                    else {
                        temp_1 = tempread;
                    }
                    resolve(temp_1);
                }
                else {
                    reject('temp error');
                }
            }
        });
    });
}
function temp(unit) {
    return new Promise(function (resolve, reject) {
        var tocat0 = '/sys/class/thermal/thermal_zone0/temp';
        var tocat1 = '/sys/devices/platform/coretemp.0/hwmon/hwmon1/temp2_input';
        pathExists(tocat0).then(function (exists) {
            if (exists) {
                getTemp(tocat0).then(function (a) {
                    resolve(a);
                }).catch(function (err) {
                    reject(err);
                });
            }
            else {
            }
        }).catch(function (err) {
            reject(err);
        });
    });
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = temp;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxJQUFZLE9BQU8sV0FBTSxVQUN6QixDQUFDLENBRGtDO0FBQ25DLElBQVksYUFBYSxXQUFNLGVBRS9CLENBQUMsQ0FGNkM7QUFFOUMsSUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBc0IxQyxJQUFNLElBQUksR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFBO0FBRy9CLGlCQUFpQixLQUFhLEVBQUUsSUFBYTtJQUN6QyxNQUFNLENBQUMsSUFBSSxPQUFPLENBQVEsVUFBQyxPQUFPLEVBQUUsTUFBTTtRQUV0QyxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssRUFBRSxVQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTTtZQUd2QyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNSLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtZQUNqQixDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBRUosRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztvQkFDVCxJQUFJLE1BQUksQ0FBQTtvQkFDUixJQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtvQkFDbkQsRUFBRSxDQUFDLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7d0JBQ2xCLE1BQUksR0FBRyxRQUFRLEdBQUcsSUFBSSxDQUFBO29CQUMxQixDQUFDO29CQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNKLE1BQUksR0FBRyxRQUFRLENBQUE7b0JBQ25CLENBQUM7b0JBQ0QsT0FBTyxDQUFDLE1BQUksQ0FBQyxDQUFBO2dCQUdqQixDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQTtnQkFFeEIsQ0FBQztZQUVMLENBQUM7UUFFTCxDQUFDLENBQUMsQ0FBQTtJQUVOLENBQUMsQ0FBQyxDQUFBO0FBQ04sQ0FBQztBQUVELGNBQTZCLElBQWE7SUFDdEMsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU07UUFJL0IsSUFBTSxNQUFNLEdBQUcsdUNBQXVDLENBQUE7UUFDdEQsSUFBTSxNQUFNLEdBQUcsMkRBQTJELENBQUE7UUFFMUUsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLE1BQU07WUFDMUIsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDVCxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsQ0FBQztvQkFDbkIsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO2dCQUNkLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFDLEdBQUc7b0JBQ1QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO2dCQUVmLENBQUMsQ0FBQyxDQUFBO1lBRU4sQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO1lBRVIsQ0FBQztRQUdMLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFBLEdBQUc7WUFDUixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7UUFFZixDQUFDLENBQUMsQ0FBQztJQUVQLENBQUMsQ0FBQyxDQUFBO0FBRU4sQ0FBQztBQTdCRDtzQkE2QkMsQ0FBQSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vXG5cbmltcG9ydCAqIGFzIFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnXG5pbXBvcnQgKiBhcyBjaGlsZF9wcm9jZXNzIGZyb20gJ2NoaWxkX3Byb2Nlc3MnXG5cbmNvbnN0IHBhdGhFeGlzdHMgPSByZXF1aXJlKCdwYXRoLWV4aXN0cycpO1xuXG5cbmludGVyZmFjZSBJY29yZXMge1xuXG50ZW1wOm51bWJlcjtcbnVuaXQ6c3RyaW5nXG5jb3JlbnVtYmVyOm51bWJlclxuXG59XG5cblxuaW50ZXJmYWNlIEl0ZW1wIHtcblxubWVkaWE6bnVtYmVyXG51bml0OnN0cmluZ1xuXG5jb3JlczogSWNvcmVzW11cblxufVxuXG5cbmNvbnN0IGV4ZWMgPSBjaGlsZF9wcm9jZXNzLmV4ZWNcblxuXG5mdW5jdGlvbiBnZXRUZW1wKHRvY2F0OiBzdHJpbmcsIHVuaXQ/OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8SXRlbXA+KChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgICBleGVjKCdjYXQgJyArIHRvY2F0LCAoZXJyb3IsIHN0ZG91dCwgc3RkZXJyKSA9PiB7XG5cblxuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKVxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIGlmIChzdGRvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXBcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcHJlYWQgPSBwYXJzZUludChzdGRvdXQucmVwbGFjZSgnXFxuJywgJycpKVxuICAgICAgICAgICAgICAgICAgICBpZiAodGVtcHJlYWQgPiAxMDAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wID0gdGVtcHJlYWQgLyAxMDAwXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wID0gdGVtcHJlYWRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRlbXApXG5cblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCgndGVtcCBlcnJvcicpXG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KVxuXG4gICAgfSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGVtcCh1bml0Pzogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuLy8gcGVyIGkgc2lzdGVtaSBtdWx0aWNvcmUgdmFubm8gY29udHJvbGxhdGkgKyBmaWxlIGUgdmEgZmF0dGEgdW5hIG1lZGlhIChzZSBzaWFtbyBwcGlnbm9saSlcblxuICAgICAgICBjb25zdCB0b2NhdDAgPSAnL3N5cy9jbGFzcy90aGVybWFsL3RoZXJtYWxfem9uZTAvdGVtcCcgLy8gY29udHJvbGxhIHNlIGRhIHF1YWxjaGUgcGFydGUgY2kgc29ubyBtaW5pbWkgZSBtYXNzaW1pXG4gICAgICAgIGNvbnN0IHRvY2F0MSA9ICcvc3lzL2RldmljZXMvcGxhdGZvcm0vY29yZXRlbXAuMC9od21vbi9od21vbjEvdGVtcDJfaW5wdXQnIC8vIHF1aSBpIG1pbmltaSBlIG1hc3NpbWkgY2kgc29ubyBzaWN1cm9cblxuICAgICAgICBwYXRoRXhpc3RzKHRvY2F0MCkudGhlbihleGlzdHMgPT4ge1xuICAgICAgICAgICAgaWYgKGV4aXN0cykge1xuICAgICAgICAgICAgICAgIGdldFRlbXAodG9jYXQwKS50aGVuKChhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoYSlcbiAgICAgICAgICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpXG5cbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vPT4gdHJ1ZSBcbiAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgIHJlamVjdChlcnIpXG5cbiAgICAgICAgfSk7XG5cbiAgICB9KVxuXG59Il19
