"use strict";
var os = require('os');
var Promise = require('bluebird');
var child_process = require('child_process');
var exec = child_process.exec;
function temp(unit) {
    return new Promise(function (resolve, reject) {
        var cmd;
        switch (os.arch()) {
            case "arm":
                cmd = 'cat /sys/class/thermal/thermal_zone0/temp';
                break;
            case "x64":
                cmd = 'cat /sys/class/thermal/thermal_zone0/temp';
                break;
        }
        exec(cmd, function (error, stdout, stderr) {
            if (error) {
                reject(error);
            }
            else {
                if (stdout) {
                    resolve(parseInt(stdout.replace('\n', '')) / 1000);
                }
                else {
                    reject('temp error');
                }
            }
        });
    });
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = temp;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxJQUFZLEVBQUUsV0FBTSxJQUFJLENBQUMsQ0FBQTtBQUN6QixJQUFZLE9BQU8sV0FBTSxVQUN6QixDQUFDLENBRGtDO0FBQ25DLElBQVksYUFBYSxXQUFNLGVBRS9CLENBQUMsQ0FGNkM7QUFFOUMsSUFBTSxJQUFJLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQTtBQUsvQixjQUE2QixJQUFhO0lBQ3RDLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1FBRS9CLElBQUksR0FBRyxDQUFBO1FBRVAsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztZQUVoQixLQUFLLEtBQUs7Z0JBQ04sR0FBRyxHQUFHLDJDQUEyQyxDQUFBO2dCQUVqRCxLQUFLLENBQUE7WUFFVCxLQUFLLEtBQUs7Z0JBRU4sR0FBRyxHQUFHLDJDQUEyQyxDQUFBO2dCQUVqRCxLQUFLLENBQUE7UUFHYixDQUFDO1FBR0QsSUFBSSxDQUFDLEdBQUcsRUFBRSxVQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTTtZQUc1QixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNSLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtZQUNqQixDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBRUosRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztvQkFFVCxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUE7Z0JBR25ELENBQUM7Z0JBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ0osTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFBO2dCQUV4QixDQUFDO1lBRUwsQ0FBQztRQUdMLENBQUMsQ0FBQyxDQUFBO0lBR04sQ0FBQyxDQUFDLENBQUE7QUFFTixDQUFDO0FBL0NEO3NCQStDQyxDQUFBIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9cbmltcG9ydCAqIGFzIG9zIGZyb20gJ29zJztcbmltcG9ydCAqIGFzIFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnXG5pbXBvcnQgKiBhcyBjaGlsZF9wcm9jZXNzIGZyb20gJ2NoaWxkX3Byb2Nlc3MnXG5cbmNvbnN0IGV4ZWMgPSBjaGlsZF9wcm9jZXNzLmV4ZWNcblxuXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGVtcCh1bml0Pzogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgICBsZXQgY21kXG5cbiAgICAgICAgc3dpdGNoIChvcy5hcmNoKCkpIHtcblxuICAgICAgICAgICAgY2FzZSBcImFybVwiOlxuICAgICAgICAgICAgICAgIGNtZCA9ICdjYXQgL3N5cy9jbGFzcy90aGVybWFsL3RoZXJtYWxfem9uZTAvdGVtcCdcblxuICAgICAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICAgIGNhc2UgXCJ4NjRcIjpcblxuICAgICAgICAgICAgICAgIGNtZCA9ICdjYXQgL3N5cy9jbGFzcy90aGVybWFsL3RoZXJtYWxfem9uZTAvdGVtcCdcblxuICAgICAgICAgICAgICAgIGJyZWFrXG5cblxuICAgICAgICB9XG5cblxuICAgICAgICBleGVjKGNtZCwgKGVycm9yLCBzdGRvdXQsIHN0ZGVycikgPT4ge1xuXG5cbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcilcbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoc3Rkb3V0KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShwYXJzZUludChzdGRvdXQucmVwbGFjZSgnXFxuJywnJykpLzEwMDApXG5cblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCgndGVtcCBlcnJvcicpXG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgIH0pXG5cblxuICAgIH0pXG5cbn0iXX0=
