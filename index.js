"use strict";
var Promise = require('bluebird');
var child_process = require('child_process');
var pathExists = require('path-exists');
var exec = child_process.exec;
function getTemp(tocat, unit) {
    return new Promise(function (resolve, reject) {
        exec('cat ' + tocat, function (error, stdout, stderr) {
            if (error) {
                reject(error);
            }
            else {
                if (stdout) {
                    var temp_1;
                    var tempread = parseInt(stdout.replace('\n', ''));
                    if (tempread > 1000) {
                        temp_1 = tempread / 1000;
                    }
                    else {
                        temp_1 = tempread;
                    }
                    resolve(temp_1);
                }
                else {
                    reject('temp error');
                }
            }
        });
    });
}
function temp(unit) {
    return new Promise(function (resolve, reject) {
        var tocat0 = '/sys/class/thermal/thermal_zone0/temp';
        var tocat1 = '/sys/class/thermal/thermal_zone0/temp';
        pathExists(tocat0).then(function (exists) {
            if (exists) {
                getTemp(tocat0).then(function (a) {
                    resolve(a);
                }).catch(function (err) {
                    reject(err);
                });
            }
            else {
            }
        }).catch(function (err) {
            reject(err);
        });
    });
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = temp;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxJQUFZLE9BQU8sV0FBTSxVQUN6QixDQUFDLENBRGtDO0FBQ25DLElBQVksYUFBYSxXQUFNLGVBRS9CLENBQUMsQ0FGNkM7QUFFOUMsSUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBSTFDLElBQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUE7QUFHL0IsaUJBQWlCLEtBQWEsRUFBRSxJQUFhO0lBQ3pDLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBUyxVQUFDLE9BQU8sRUFBRSxNQUFNO1FBRXZDLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxFQUFFLFVBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNO1lBR3ZDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ1IsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQ2pCLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFFSixFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO29CQUNULElBQUksTUFBSSxDQUFBO29CQUNSLElBQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFBO29CQUNuRCxFQUFFLENBQUMsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQzt3QkFDbEIsTUFBSSxHQUFHLFFBQVEsR0FBRyxJQUFJLENBQUE7b0JBQzFCLENBQUM7b0JBQUMsSUFBSSxDQUFDLENBQUM7d0JBQ0osTUFBSSxHQUFHLFFBQVEsQ0FBQTtvQkFDbkIsQ0FBQztvQkFDRCxPQUFPLENBQUMsTUFBSSxDQUFDLENBQUE7Z0JBR2pCLENBQUM7Z0JBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ0osTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFBO2dCQUV4QixDQUFDO1lBRUwsQ0FBQztRQUVMLENBQUMsQ0FBQyxDQUFBO0lBRU4sQ0FBQyxDQUFDLENBQUE7QUFDTixDQUFDO0FBRUQsY0FBNkIsSUFBYTtJQUN0QyxNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtRQUUvQixJQUFNLE1BQU0sR0FBRyx1Q0FBdUMsQ0FBQTtRQUN0RCxJQUFNLE1BQU0sR0FBRyx1Q0FBdUMsQ0FBQTtRQUV0RCxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsTUFBTTtZQUMxQixFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUNULE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxDQUFDO29CQUNuQixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUE7Z0JBQ2QsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQUMsR0FBRztvQkFDVCxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7Z0JBRWYsQ0FBQyxDQUFDLENBQUE7WUFFTixDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7WUFFUixDQUFDO1FBR0wsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQUEsR0FBRztZQUNSLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUVmLENBQUMsQ0FBQyxDQUFDO0lBRVAsQ0FBQyxDQUFDLENBQUE7QUFFTixDQUFDO0FBM0JEO3NCQTJCQyxDQUFBIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9cblxuaW1wb3J0ICogYXMgUHJvbWlzZSBmcm9tICdibHVlYmlyZCdcbmltcG9ydCAqIGFzIGNoaWxkX3Byb2Nlc3MgZnJvbSAnY2hpbGRfcHJvY2VzcydcblxuY29uc3QgcGF0aEV4aXN0cyA9IHJlcXVpcmUoJ3BhdGgtZXhpc3RzJyk7XG5cblxuXG5jb25zdCBleGVjID0gY2hpbGRfcHJvY2Vzcy5leGVjXG5cblxuZnVuY3Rpb24gZ2V0VGVtcCh0b2NhdDogc3RyaW5nLCB1bml0Pzogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPG51bWJlcj4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICAgIGV4ZWMoJ2NhdCAnICsgdG9jYXQsIChlcnJvciwgc3Rkb3V0LCBzdGRlcnIpID0+IHtcblxuXG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgaWYgKHN0ZG91dCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcFxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZW1wcmVhZCA9IHBhcnNlSW50KHN0ZG91dC5yZXBsYWNlKCdcXG4nLCAnJykpXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wcmVhZCA+IDEwMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXAgPSB0ZW1wcmVhZCAvIDEwMDBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXAgPSB0ZW1wcmVhZFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodGVtcClcblxuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCd0ZW1wIGVycm9yJylcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pXG5cbiAgICB9KVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0ZW1wKHVuaXQ/OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICAgIGNvbnN0IHRvY2F0MCA9ICcvc3lzL2NsYXNzL3RoZXJtYWwvdGhlcm1hbF96b25lMC90ZW1wJ1xuICAgICAgICBjb25zdCB0b2NhdDEgPSAnL3N5cy9jbGFzcy90aGVybWFsL3RoZXJtYWxfem9uZTAvdGVtcCdcblxuICAgICAgICBwYXRoRXhpc3RzKHRvY2F0MCkudGhlbihleGlzdHMgPT4ge1xuICAgICAgICAgICAgaWYgKGV4aXN0cykge1xuICAgICAgICAgICAgICAgIGdldFRlbXAodG9jYXQwKS50aGVuKChhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoYSlcbiAgICAgICAgICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpXG5cbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vPT4gdHJ1ZSBcbiAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgIHJlamVjdChlcnIpXG5cbiAgICAgICAgfSk7XG5cbiAgICB9KVxuXG59Il19
