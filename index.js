"use strict";
var Promise = require('bluebird');
var child_process = require('child_process');
var pathExists = require('path-exists');
var pkg = require("./package.json");
var exec = child_process.exec;
function getTemp(tocat, unit) {
    return new Promise(function (resolve, reject) {
        exec('cat ' + tocat, function (error, stdout, stderr) {
            if (error) {
                reject(error);
            }
            else {
                if (stdout) {
                    var temp_1 = { temperature: 0, cores: [], unit: 'default' };
                    var tempread = parseInt(stdout.replace('\n', ''));
                    if (tempread > 1000) {
                        temp_1.temperature = tempread / 1000;
                    }
                    else {
                        temp_1.temperature = tempread;
                    }
                    resolve(temp_1);
                }
                else {
                    reject('temp error');
                }
            }
        });
    });
}
function temp(unit) {
    return new Promise(function (resolve, reject) {
        var tocat0 = '/sys/class/thermal/thermal_zone0/temp';
        var tocat1 = '/sys/devices/platform/coretemp.0/hwmon/hwmon1/temp2_input';
        pathExists(tocat0).then(function (exists) {
            if (exists) {
                getTemp(tocat0).then(function (a) {
                    resolve(a);
                }).catch(function (err) {
                    reject(err);
                });
            }
            else {
                getTemp(tocat1).then(function (a) {
                    resolve(a);
                }).catch(function (err) {
                    reject(err);
                });
            }
        }).catch(function (err) {
            reject('Questo non dovrebbe succedere');
        });
    });
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = temp;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxJQUFZLE9BQU8sV0FBTSxVQUN6QixDQUFDLENBRGtDO0FBQ25DLElBQVksYUFBYSxXQUFNLGVBRS9CLENBQUMsQ0FGNkM7QUFFOUMsSUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBRTFDLElBQU0sR0FBRyxHQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO0FBc0JuQyxJQUFNLElBQUksR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFBO0FBRy9CLGlCQUFpQixLQUFhLEVBQUUsSUFBYTtJQUN6QyxNQUFNLENBQUMsSUFBSSxPQUFPLENBQVEsVUFBQyxPQUFPLEVBQUUsTUFBTTtRQUV0QyxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssRUFBRSxVQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTTtZQUd2QyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNSLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtZQUNqQixDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBR0osRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztvQkFDVCxJQUFJLE1BQUksR0FBTyxFQUFDLFdBQVcsRUFBQyxDQUFDLEVBQUMsS0FBSyxFQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUMsU0FBUyxFQUFFLENBQUE7b0JBQ3hELElBQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFBO29CQUNuRCxFQUFFLENBQUMsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQzt3QkFDbEIsTUFBSSxDQUFDLFdBQVcsR0FBRyxRQUFRLEdBQUcsSUFBSSxDQUFBO29CQUN0QyxDQUFDO29CQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNKLE1BQUksQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFBO29CQUMvQixDQUFDO29CQUNELE9BQU8sQ0FBQyxNQUFJLENBQUMsQ0FBQTtnQkFHakIsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDSixNQUFNLENBQUMsWUFBWSxDQUFDLENBQUE7Z0JBRXhCLENBQUM7WUFFTCxDQUFDO1FBRUwsQ0FBQyxDQUFDLENBQUE7SUFFTixDQUFDLENBQUMsQ0FBQTtBQUNOLENBQUM7QUFFRCxjQUE2QixJQUFhO0lBQ3RDLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBUSxVQUFDLE9BQU8sRUFBRSxNQUFNO1FBSXRDLElBQU0sTUFBTSxHQUFHLHVDQUF1QyxDQUFBO1FBQ3RELElBQU0sTUFBTSxHQUFHLDJEQUEyRCxDQUFBO1FBRTFFLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxNQUFNO1lBQzFCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQ1QsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLENBQUM7b0JBQ25CLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDZCxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQyxHQUFHO29CQUNULE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtnQkFFZixDQUFDLENBQUMsQ0FBQTtZQUVOLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDUixPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsQ0FBQztvQkFDZixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUE7Z0JBQ2QsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQUMsR0FBRztvQkFDVCxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7Z0JBRWYsQ0FBQyxDQUFDLENBQUE7WUFDTixDQUFDO1FBR0wsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQUEsR0FBRztZQUNSLE1BQU0sQ0FBQywrQkFBK0IsQ0FBQyxDQUFBO1FBRTNDLENBQUMsQ0FBQyxDQUFDO0lBRVAsQ0FBQyxDQUFDLENBQUE7QUFFTixDQUFDO0FBbENEO3NCQWtDQyxDQUFBIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9cblxuaW1wb3J0ICogYXMgUHJvbWlzZSBmcm9tICdibHVlYmlyZCdcbmltcG9ydCAqIGFzIGNoaWxkX3Byb2Nlc3MgZnJvbSAnY2hpbGRfcHJvY2VzcydcblxuY29uc3QgcGF0aEV4aXN0cyA9IHJlcXVpcmUoJ3BhdGgtZXhpc3RzJyk7XG5cbmNvbnN0IHBrZz1yZXF1aXJlKFwiLi9wYWNrYWdlLmpzb25cIikgLy8gc2VydmUgcGVyIHByZW5kZXJ0aSBsYSB2ZXJzaW9uZSBkZWxsYSBhcGkgY29uIHBrZy52ZXJzaW9uXG5cblxuaW50ZXJmYWNlIEljb3JlcyB7XG5cbnRlbXA6bnVtYmVyO1xudW5pdDpzdHJpbmdcbmNvcmVudW1iZXI6bnVtYmVyO1xudmVyc2lvbjpzdHJpbmc7XG59XG5cblxuaW50ZXJmYWNlIEl0ZW1wIHtcblxudGVtcGVyYXR1cmU6bnVtYmVyO1xudW5pdDpzdHJpbmc7XG5cbmNvcmVzOiBJY29yZXNbXTtcblxufVxuXG5cbmNvbnN0IGV4ZWMgPSBjaGlsZF9wcm9jZXNzLmV4ZWNcblxuXG5mdW5jdGlvbiBnZXRUZW1wKHRvY2F0OiBzdHJpbmcsIHVuaXQ/OiBzdHJpbmcpOlByb21pc2U8SXRlbXA+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8SXRlbXA+KChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgICBleGVjKCdjYXQgJyArIHRvY2F0LCAoZXJyb3IsIHN0ZG91dCwgc3RkZXJyKSA9PiB7XG5cblxuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgIGlmIChzdGRvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXA6SXRlbXA9e3RlbXBlcmF0dXJlOjAsY29yZXM6W10sIHVuaXQ6J2RlZmF1bHQnIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcHJlYWQgPSBwYXJzZUludChzdGRvdXQucmVwbGFjZSgnXFxuJywgJycpKVxuICAgICAgICAgICAgICAgICAgICBpZiAodGVtcHJlYWQgPiAxMDAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wLnRlbXBlcmF0dXJlID0gdGVtcHJlYWQgLyAxMDAwXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wLnRlbXBlcmF0dXJlID0gdGVtcHJlYWRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRlbXApXG5cblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCgndGVtcCBlcnJvcicpXG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KVxuXG4gICAgfSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGVtcCh1bml0PzogT2JqZWN0KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPEl0ZW1wPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbi8vIHBlciBpIHNpc3RlbWkgbXVsdGljb3JlIHZhbm5vIGNvbnRyb2xsYXRpICsgZmlsZSBlIHZhIGZhdHRhIHVuYSBtZWRpYSAoc2Ugc2lhbW8gcHBpZ25vbGkpXG5cbiAgICAgICAgY29uc3QgdG9jYXQwID0gJy9zeXMvY2xhc3MvdGhlcm1hbC90aGVybWFsX3pvbmUwL3RlbXAnIC8vIGNvbnRyb2xsYSBzZSBkYSBxdWFsY2hlIHBhcnRlIGNpIHNvbm8gbWluaW1pIGUgbWFzc2ltaVxuICAgICAgICBjb25zdCB0b2NhdDEgPSAnL3N5cy9kZXZpY2VzL3BsYXRmb3JtL2NvcmV0ZW1wLjAvaHdtb24vaHdtb24xL3RlbXAyX2lucHV0JyAvLyBxdWkgaSBtaW5pbWkgZSBtYXNzaW1pIGNpIHNvbm8gc2ljdXJvXG5cbiAgICAgICAgcGF0aEV4aXN0cyh0b2NhdDApLnRoZW4oZXhpc3RzID0+IHtcbiAgICAgICAgICAgIGlmIChleGlzdHMpIHtcbiAgICAgICAgICAgICAgICBnZXRUZW1wKHRvY2F0MCkudGhlbigoYSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGEpXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKVxuXG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFRlbXAodG9jYXQxKS50aGVuKChhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoYSlcbiAgICAgICAgICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpXG5cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLz0+IHRydWUgXG4gICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICByZWplY3QoJ1F1ZXN0byBub24gZG92cmViYmUgc3VjY2VkZXJlJylcblxuICAgICAgICB9KTtcblxuICAgIH0pXG5cbn0iXX0=
